ConceptualModel moodle 
{
	Class Usuario
	{
		description
		{
			"Clase que representa a un usuario de la aplicación"
		}
		
		attributes
		{
			private oid email : String;
			private unique dni : String;
			private password : Password;
			private nombre : String;
			private apellidos : String;
			private fecha_nacimiento : Date;
		}
		
		operations
		{
			public new::New (p_email : String, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Object->Usuario;
			public modify::Modifier (p_oid : OID -> Usuario, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Void;
			public destroy::Destroy (p_oid : OID -> Usuario) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Usuario>;
			public readOID::ReadOID (p_oid : OID -> Usuario) : Object -> Usuario;
			public login (usuario : String, pass : String) : Boolean;
			public changePassword (usuario:String, pass :String, newpass: String):Boolean;
			public readDni::ReadFilter (dni : String) : Object -> Usuario { filter = "FROM UsuarioEN us where us.Dni = :dni" };
		}
	};
	
	Class Administrador extends Usuario
	{
		description
		{
			"Clase que representa a un administrador de la aplicación"
		}
		
		attributes
		{
			private unique cod_administrador : Integer;
			private ocupacion : String;
		}
		
		operations
		{
			public new::New (p_cod_administrador : Integer, p_ocupacion : String, p_email : String, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Object->Administrador;
			public modify::Modifier (p_oid : OID -> Administrador, p_cod_administrador : Integer, p_ocupacion : String, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Void;
			public destroy::Destroy (p_oid : OID -> Administrador) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Administrador>;
			public readOID::ReadOID (p_oid : OID -> Administrador) : Object -> Administrador;
		}
	};
	
	Class UsuarioComun extends Usuario
	{
		description 
		{
			"Clase que representa a un usuario común"
		}
		
		attributes
		{
			
		}
		
		operations
		{
			public new::New (p_email : String, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Object->UsuarioComun;
			public modify::Modifier (p_oid : OID -> UsuarioComun, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->UsuarioComun>;
			public readOID::ReadOID (p_oid : OID -> UsuarioComun) : Object -> UsuarioComun;
			public relationer_mensajes::Relationer->mensaje_usuariocomun.mensajes (p_usuariocomun : OID -> UsuarioComun, p_mensaje : List<OID -> Mensaje>) : Void;
			public unrelationer_mensajes::Unrelationer->mensaje_usuariocomun.mensajes (p_usuariocomun : OID -> UsuarioComun, p_mensaje : List<OID -> Mensaje>) : Void;
		}
	};
	
	Class Profesor extends UsuarioComun
	{
		description
		{
			"Clase que representa a un profesor"
		}
		
		attributes
		{
			private unique cod_profesor : Integer;
		}
		
		operations
		{
			public new::New (p_cod_profesor : Integer, p_email : String, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Object->Profesor;
			public modify::Modifier (p_oid : OID -> Profesor, p_cod_profesor : Integer, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Void;
			public destroy::Destroy (p_oid : OID -> Profesor) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Profesor>;
			public readOID::ReadOID (p_oid : OID -> Profesor) : Object -> Profesor;
			
			public modifyNoPassword::Modifier customized (p_oid : OID -> Profesor, p_dni : String, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date, p_cod_profesor : Integer) : Void;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM ProfesorEN" };
			public readCod::ReadFilter (cod : Integer) : Object -> Profesor { filter = "FROM ProfesorEN prof where prof.Cod_profesor =:cod "};
			
			public relationer_entregas_propuestas::Relationer->profesor_entrega.entregas_propuestas (p_profesor : OID -> Profesor, p_entrega : List<OID -> Entrega>) : Void;
			public relationer_materiales::Relationer->material_profesor_uploader.materiales (p_profesor : OID -> Profesor, p_material : List<OID -> Material>) : Void;
			public relationer_mensajes::Relationer->mensaje_usuariocomun.mensajes (p_profesor : OID -> Profesor, p_mensaje : List<OID -> Mensaje>) : Void;
			public relationer_tutorias::Relationer->tutoria_profesor.tutorias (p_profesor : OID -> Profesor, p_tutoria : List<OID -> Tutoria>) : Void;
			public unrelationer_entregas_propuestas::Unrelationer->profesor_entrega.entregas_propuestas (p_profesor : OID -> Profesor, p_entrega : List<OID -> Entrega>) : Void;
			public unrelationer_materiales::Unrelationer->material_profesor_uploader.materiales (p_profesor : OID -> Profesor, p_material : List<OID -> Material>) : Void;
			public unrelationer_mensajes::Unrelationer->mensaje_usuariocomun.mensajes (p_profesor : OID -> Profesor, p_mensaje : List<OID -> Mensaje>) : Void;
			public unrelationer_tutorias::Unrelationer->tutoria_profesor.tutorias (p_profesor : OID -> Profesor, p_tutoria : List<OID -> Tutoria>) : Void;
		}
	};
	
	Class Alumno extends UsuarioComun
	{
		description
		{
			"Clase que representa a un alumno"
		}
		
		attributes
		{
			private unique cod_alumno : Integer;
			private baneado : Boolean;
		}
		
		operations
		{
			public new::New (p_cod_alumno : Integer, p_baneado : Boolean, p_email : String, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date, p_expediente : Object -> Expediente) : Object->Alumno;
			public modify::Modifier (p_oid : OID -> Alumno, p_cod_alumno : Integer, p_baneado : Boolean, p_dni : String, p_password : Password, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Void;
			public modifyNoPassword::Modifier customized (p_oid : OID -> Alumno, p_cod_alumno : Integer, p_baneado : Boolean, p_dni : String, p_nombre : String, p_apellidos : String, p_fecha_nacimiento : Date) : Void;
			public destroy::Destroy (p_oid : OID -> Alumno) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Alumno>;
			public readOID::ReadOID (p_oid : OID -> Alumno) : Object -> Alumno;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM AlumnoEN" };
			public readCod::ReadFilter (cod : Integer) : Object -> Alumno { filter = "FROM AlumnoEN alu where alu.Cod_alumno =:cod "};
			
			public relationer_controles::Relationer->alumno_controlalumno.controles (p_alumno : OID -> Alumno, p_controlalumno : List<OID -> ControlAlumno>) : Void;
			public relationer_entregas::Relationer->alumno_entregaalumno.entregas (p_alumno : OID -> Alumno, p_entregaalumno : List<OID -> EntregaAlumno>) : Void;
			public relationer_expediente::Relationer->alumno_expediente.expediente (p_alumno : OID -> Alumno, p_expediente : OID -> Expediente) : Void;
			public relationer_grupos_trabajo::Relationer->grupotrabajo_alumno.grupos_trabajo (p_alumno : OID -> Alumno, p_grupotrabajo : List<OID -> GrupoTrabajo>) : Void;
			public relationer_mensajes::Relationer->mensaje_usuariocomun.mensajes (p_alumno : OID -> Alumno, p_mensaje : List<OID -> Mensaje>) : Void;
			public relationer_sistemas_evaluacion::Relationer->alumno_evaluacionalumno.sistemas_evaluacion (p_alumno : OID -> Alumno, p_evaluacionalumno : List<OID -> EvaluacionAlumno>) : Void;
			public relationer_tutorias::Relationer->tutoria_alumno.tutorias (p_alumno : OID -> Alumno, p_tutoria : List<OID -> Tutoria>) : Void;
			public unrelationer_controles::Unrelationer->alumno_controlalumno.controles (p_alumno : OID -> Alumno, p_controlalumno : List<OID -> ControlAlumno>) : Void;
			public unrelationer_entregas::Unrelationer->alumno_entregaalumno.entregas (p_alumno : OID -> Alumno, p_entregaalumno : List<OID -> EntregaAlumno>) : Void;
			public unrelationer_expediente::Unrelationer->alumno_expediente.expediente (p_alumno : OID -> Alumno, p_expediente : OID -> Expediente) : Void;
			public unrelationer_grupos_trabajo::Unrelationer->grupotrabajo_alumno.grupos_trabajo (p_alumno : OID -> Alumno, p_grupotrabajo : List<OID -> GrupoTrabajo>) : Void;
			public unrelationer_mensajes::Unrelationer->mensaje_usuariocomun.mensajes (p_alumno : OID -> Alumno, p_mensaje : List<OID -> Mensaje>) : Void;
			public unrelationer_sistemas_evaluacion::Unrelationer->alumno_evaluacionalumno.sistemas_evaluacion (p_alumno : OID -> Alumno, p_evaluacionalumno : List<OID -> EvaluacionAlumno>) : Void;
			public unrelationer_tutorias::Unrelationer->tutoria_alumno.tutorias (p_alumno : OID -> Alumno, p_tutoria : List<OID -> Tutoria>) : Void;
		}
	};
	
	Class Tutoria
	{
		description
		{
			"Clase que representa a una tutoría entre un alumno y un profesor para una asignatura"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private tema : String;
			private abierta : Boolean;
			private fecha_creacion : Date;
			private fecha_cierre : Date;
			private por_responder : Boolean;
		}
		
		operations
		{
			public new::New (p_tema : String, p_abierta : Boolean, p_fecha_creacion : Date, p_fecha_cierre : Date, p_por_responder : Boolean, p_profesor : OID -> Profesor, p_alumno : OID -> Alumno, p_asignatura : OID -> AsignaturaAnyo) : Object->Tutoria;
			public modify::Modifier (p_oid : OID -> Tutoria, p_tema : String, p_abierta : Boolean, p_fecha_creacion : Date, p_fecha_cierre : Date, p_por_responder : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> Tutoria) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Tutoria>;
			public readOID::ReadOID (p_oid : OID -> Tutoria) : Object -> Tutoria;
			public relationer_alumno::Relationer->tutoria_alumno.alumno (p_tutoria : OID -> Tutoria, p_alumno : OID -> Alumno) : Void;
			public relationer_asignatura::Relationer->tutoria_asignaturaanyo.asignatura (p_tutoria : OID -> Tutoria, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public relationer_mensajes::Relationer->tutoria_mensaje.mensajes (p_tutoria : OID -> Tutoria, p_mensaje : List<OID -> Mensaje>) : Void;
			public relationer_profesor::Relationer->tutoria_profesor.profesor (p_tutoria : OID -> Tutoria, p_profesor : OID -> Profesor) : Void;
			public unrelationer_alumno::Unrelationer->tutoria_alumno.alumno (p_tutoria : OID -> Tutoria, p_alumno : OID -> Alumno) : Void;
			public unrelationer_asignatura::Unrelationer->tutoria_asignaturaanyo.asignatura (p_tutoria : OID -> Tutoria, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public unrelationer_mensajes::Unrelationer->tutoria_mensaje.mensajes (p_tutoria : OID -> Tutoria, p_mensaje : List<OID -> Mensaje>) : Void;
			public unrelationer_profesor::Unrelationer->tutoria_profesor.profesor (p_tutoria : OID -> Tutoria, p_profesor : OID -> Profesor) : Void;
			
		}
	};
	
	Class Mensaje
	{
		description
		{
			"Clase que representa a un mensaje de una tutoría"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private contenido : String;
			private fecha : Date;
			private respondido : Boolean;
		}
		
		operations
		{
			public new::New (p_contenido : String, p_fecha : Date, p_respondido : Boolean, p_tutoria : OID -> Tutoria, p_usuario : OID -> UsuarioComun) : Object->Mensaje;
			public modify::Modifier (p_oid : OID -> Mensaje, p_contenido : String, p_fecha : Date, p_respondido : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> Mensaje) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Mensaje>;
			public readOID::ReadOID (p_oid : OID -> Mensaje) : Object -> Mensaje;
			public relationer_tutoria::Relationer->tutoria_mensaje.tutoria (p_mensaje : OID -> Mensaje, p_tutoria : OID -> Tutoria) : Void;
			public relationer_usuario::Relationer->mensaje_usuariocomun.usuario (p_mensaje : OID -> Mensaje, p_usuariocomun : OID -> UsuarioComun) : Void;
			public unrelationer_tutoria::Unrelationer->tutoria_mensaje.tutoria (p_mensaje : OID -> Mensaje, p_tutoria : OID -> Tutoria) : Void;
			public unrelationer_usuario::Unrelationer->mensaje_usuariocomun.usuario (p_mensaje : OID -> Mensaje, p_usuariocomun : OID -> UsuarioComun) : Void;
		}
	};
	
	Class Asignatura
	{
		description
		{
			"Clase que representa a una asignatura"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private unique cod_asignatura : String;
			private nombre : String;
			private descripcion : String;
			private optativa : Boolean;
			private vigente : Boolean;
		}
		
		operations
		{
			public new::New (p_cod_asignatura : String, p_nombre : String, p_descripcion : String, p_optativa : Boolean, p_vigente : Boolean) : Object->Asignatura;
			public modify::Modifier (p_oid : OID -> Asignatura, p_cod_asignatura : String, p_nombre : String, p_descripcion : String, p_optativa : Boolean, p_vigente : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> Asignatura) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Asignatura>;
			public readOID::ReadOID (p_oid : OID -> Asignatura) : Object -> Asignatura;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM AsignaturaEN" };
			public readCod::ReadFilter (cod : String) : Object -> Asignatura { filter = "FROM AsignaturaEN asig where asig.Cod_asignatura=:cod"};
			
			public relationer_asignaturas_anyo::Relationer->asignatura_asignaturaanyo.asignaturas_anyo (p_asignatura : OID -> Asignatura, p_asignaturaanyo : List<OID -> AsignaturaAnyo>) : Void;
			public relationer_bolsas_preguntas::Relationer->asignatura_bolsapreguntas.bolsas_preguntas (p_asignatura : OID -> Asignatura, p_bolsapreguntas : List<OID -> BolsaPreguntas>) : Void;
			public relationer_curso::Relationer->asignatura_curso.curso (p_asignatura : OID -> Asignatura, p_curso : OID -> Curso) : Void;
			public relationer_expedientes_asignatura::Relationer->asignatura_expedienteasignatura.expedientes_asignatura (p_asignatura : OID -> Asignatura, p_expedienteasignatura : List<OID -> ExpedienteAsignatura>) : Void;
			public unrelationer_asignaturas_anyo::Unrelationer->asignatura_asignaturaanyo.asignaturas_anyo (p_asignatura : OID -> Asignatura, p_asignaturaanyo : List<OID -> AsignaturaAnyo>) : Void;
			public unrelationer_bolsas_preguntas::Unrelationer->asignatura_bolsapreguntas.bolsas_preguntas (p_asignatura : OID -> Asignatura, p_bolsapreguntas : List<OID -> BolsaPreguntas>) : Void;
			public unrelationer_curso::Unrelationer->asignatura_curso.curso (p_asignatura : OID -> Asignatura, p_curso : OID -> Curso) : Void;
			public unrelationer_expedientes_asignatura::Unrelationer->asignatura_expedienteasignatura.expedientes_asignatura (p_asignatura : OID -> Asignatura, p_expedienteasignatura : List<OID -> ExpedienteAsignatura>) : Void;
		}
	};
	
	Class Curso
	{
		description
		{
			"Clase que representa un curso como conjunto de asignaturas"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private cod_curso : Integer;
			private nombre : String;
		}
		
		operations
		{
			public new::New (p_cod_curso : Integer, p_nombre : String) : Object->Curso;
			public modify::Modifier (p_oid : OID -> Curso, p_cod_curso : Integer, p_nombre : String) : Void;
			public destroy::Destroy (p_oid : OID -> Curso) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Curso>;
			public readOID::ReadOID (p_oid : OID -> Curso) : Object -> Curso;
			public relationer_asignaturas::Relationer->asignatura_curso.asignaturas (p_curso : OID -> Curso, p_asignatura : List<OID -> Asignatura>) : Void;
			public unrelationer_asignaturas::Unrelationer->asignatura_curso.asignaturas (p_curso : OID -> Curso, p_asignatura : List<OID -> Asignatura>) : Void;
		}
	};
	
	Class Nota
	{
		description
		{
			"Clase que representa una nota en el expediente en letras"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre : String;
			private abreviatura : String;
			private ponderacion : Integer;
		}
		
		operations
		{
			public new::New (p_nombre : String, p_abreviatura : String, p_ponderacion : Integer) : Object->Nota;
			public modify::Modifier (p_oid : OID -> Nota, p_nombre : String, p_abreviatura : String, p_ponderacion : Integer) : Void;
			public destroy::Destroy (p_oid : OID -> Nota) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Nota>;
			public readOID::ReadOID (p_oid : OID -> Nota) : Object -> Nota;
		}
	};
	
	Class Expediente
	{
		description
		{
			"Clase que representa el expediente académico de un alumno"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private cod_expediente : Integer;
			private nota_media : Float;
			private abierto : Boolean;
		}
		
		operations
		{
			public new::New (p_cod_expediente : Integer, p_nota_media : Float, p_abierto : Boolean, p_alumno : OID -> Alumno) : Object->Expediente;
			public modify::Modifier (p_oid : OID -> Expediente, p_cod_expediente : Integer, p_nota_media : Float, p_abierto : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> Expediente) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Expediente>;
			public readOID::ReadOID (p_oid : OID -> Expediente) : Object -> Expediente;
			public relationer_alumno::Relationer->alumno_expediente.alumno (p_expediente : OID -> Expediente, p_alumno : OID -> Alumno) : Void;
			public relationer_expedientes_anyo::Relationer->expendiente_expedienteanyo.expedientes_anyo (p_expediente : OID -> Expediente, p_expedienteanyo : List<OID -> ExpedienteAnyo>) : Void;
			public unrelationer_alumno::Unrelationer->alumno_expediente.alumno (p_expediente : OID -> Expediente, p_alumno : OID -> Alumno) : Void;
			public unrelationer_expedientes_anyo::Unrelationer->expendiente_expedienteanyo.expedientes_anyo (p_expediente : OID -> Expediente, p_expedienteanyo : List<OID -> ExpedienteAnyo>) : Void;
		}
	};
	
	Class ExpedienteAnyo
	{
		description
		{
			"Clase que representa el expediente académico de un alumno en un año académico"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nota_media : Float;
			private abierto : Boolean;
		}
		
		operations
		{
			public new::New (p_nota_media : Float, p_abierto : Boolean, p_expediente : OID -> Expediente, p_anyo : OID -> AnyoAcademico) : Object->ExpedienteAnyo;
			public modify::Modifier (p_oid : OID -> ExpedienteAnyo, p_nota_media : Float, p_abierto : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> ExpedienteAnyo) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->ExpedienteAnyo>;
			public readOID::ReadOID (p_oid : OID -> ExpedienteAnyo) : Object -> ExpedienteAnyo;
			public relationer_anyo::Relationer->anyo_expedienteanyo.anyo (p_expedienteanyo : OID -> ExpedienteAnyo, p_anyoacademico : OID -> AnyoAcademico) : Void;
			public relationer_expediente::Relationer->expendiente_expedienteanyo.expediente (p_expedienteanyo : OID -> ExpedienteAnyo, p_expediente : OID -> Expediente) : Void;
			public relationer_expedientes_asignatura::Relationer->expedienteanyo_expedienteasignatura.expedientes_asignatura (p_expedienteanyo : OID -> ExpedienteAnyo, p_expedienteasignatura : List<OID -> ExpedienteAsignatura>) : Void;
			public unrelationer_anyo::Unrelationer->anyo_expedienteanyo.anyo (p_expedienteanyo : OID -> ExpedienteAnyo, p_anyoacademico : OID -> AnyoAcademico) : Void;
			public unrelationer_expediente::Unrelationer->expendiente_expedienteanyo.expediente (p_expedienteanyo : OID -> ExpedienteAnyo, p_expediente : OID -> Expediente) : Void;
			public unrelationer_expedientes_asignatura::Unrelationer->expedienteanyo_expedienteasignatura.expedientes_asignatura (p_expedienteanyo : OID -> ExpedienteAnyo, p_expedienteasignatura : List<OID -> ExpedienteAsignatura>) : Void;
			
		}
	};
	
	Class ExpedienteAsignatura
	{
		description
		{
			"Clase que representa el expediente académico de un alumno en una asignatura en un año académico"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nota_media : Float;
			private abierto : Boolean;
		}
		
		operations
		{
			public new::New (p_nota_media : Float, p_abierto : Boolean, p_expediente_anyo : OID -> ExpedienteAnyo, p_asignatura : OID -> Asignatura) : Object->ExpedienteAsignatura;
			public modify::Modifier (p_oid : OID -> ExpedienteAsignatura, p_nota_media : Float, p_abierto : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> ExpedienteAsignatura) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->ExpedienteAsignatura>;
			public readOID::ReadOID (p_oid : OID -> ExpedienteAsignatura) : Object -> ExpedienteAsignatura;
			public relationer_asignatura::Relationer->asignatura_expedienteasignatura.asignatura (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_asignatura : OID -> Asignatura) : Void;
			public relationer_expediente_anyo::Relationer->expedienteanyo_expedienteasignatura.expediente_anyo (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_expedienteanyo : OID -> ExpedienteAnyo) : Void;
			public relationer_expedientes_evaluacion::Relationer->expedienteasignatura_expedienteevaluacion.expedientes_evaluacion (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_expedienteevaluacion : List<OID -> ExpedienteEvaluacion>) : Void;
			public relationer_nota::Relationer->expedienteasignatura_nota.nota (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_nota : OID -> Nota) : Void;
			public unrelationer_asignatura::Unrelationer->asignatura_expedienteasignatura.asignatura (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_asignatura : OID -> Asignatura) : Void;
			public unrelationer_expediente_anyo::Unrelationer->expedienteanyo_expedienteasignatura.expediente_anyo (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_expedienteanyo : OID -> ExpedienteAnyo) : Void;
			public unrelationer_expedientes_evaluacion::Unrelationer->expedienteasignatura_expedienteevaluacion.expedientes_evaluacion (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_expedienteevaluacion : List<OID -> ExpedienteEvaluacion>) : Void;
			public unrelationer_nota::Unrelationer->expedienteasignatura_nota.nota (p_expedienteasignatura : OID -> ExpedienteAsignatura, p_nota : OID -> Nota) : Void;
		}
	};
	
	Class ExpedienteEvaluacion
	{
		description
		{
			"Clase que representa el expediente académico de un alumno en una asignatura para una evaluación"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nota_media : Float;
			private abierto : Boolean;
		}
		
		operations
		{
			public new::New (p_nota_media : Float, p_abierto : Boolean, p_expediente_asignatura : OID -> ExpedienteAsignatura, p_evaluacion : OID -> Evaluacion) : Object->ExpedienteEvaluacion;
			public modify::Modifier (p_oid : OID -> ExpedienteEvaluacion, p_nota_media : Float, p_abierto : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> ExpedienteEvaluacion) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->ExpedienteEvaluacion>;
			public readOID::ReadOID (p_oid : OID -> ExpedienteEvaluacion) : Object -> ExpedienteEvaluacion;
			public relationer_evaluacion::Relationer->evaluacion_expedienteevaluacion.evaluacion (p_expedienteevaluacion : OID -> ExpedienteEvaluacion, p_evaluacion : OID -> Evaluacion) : Void;
			public relationer_expediente_asignatura::Relationer->expedienteasignatura_expedienteevaluacion.expediente_asignatura (p_expedienteevaluacion : OID -> ExpedienteEvaluacion, p_expedienteasignatura : OID -> ExpedienteAsignatura) : Void;
			public unrelationer_evaluacion::Unrelationer->evaluacion_expedienteevaluacion.evaluacion (p_expedienteevaluacion : OID -> ExpedienteEvaluacion, p_evaluacion : OID -> Evaluacion) : Void;
			public unrelationer_expediente_asignatura::Unrelationer->expedienteasignatura_expedienteevaluacion.expediente_asignatura (p_expedienteevaluacion : OID -> ExpedienteEvaluacion, p_expedienteasignatura : OID -> ExpedienteAsignatura) : Void;
		}
	};
	
	Class GrupoTrabajo
	{
		description
		{
			"Clase que representa un grupo de trabajo de alumnos para una asignatura"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private unique cod_grupo : String;
			private nombre : String;
			private descripcion : String;
			private password : Password;
			private capacidad : Integer;
		}
		
		operations
		{
			public new::New (p_cod_grupo : String, p_nombre : String, p_descripcion : String, p_password : Password, p_capacidad : Integer, p_asignatura : OID -> AsignaturaAnyo) : Object->GrupoTrabajo;
			public modify::Modifier (p_oid : OID -> GrupoTrabajo, p_cod_grupo : String, p_nombre : String, p_descripcion : String, p_password : Password, p_capacidad : Integer) : Void;
			public destroy::Destroy (p_oid : OID -> GrupoTrabajo) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->GrupoTrabajo>;
			public readOID::ReadOID (p_oid : OID -> GrupoTrabajo) : Object -> GrupoTrabajo;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM GrupoTrabajoEN" };
			public readCod::ReadFilter (cod : String) : Object -> GrupoTrabajo { filter = "FROM GrupoTrabajoEN grupo where grupo.Cod_grupo=:cod"};
			
			public relationer_alumnos::Relationer->grupotrabajo_alumno.alumnos (p_grupotrabajo : OID -> GrupoTrabajo, p_alumno : List<OID -> Alumno>) : Void;
			public relationer_asignatura::Relationer->grupotrabajo_asignaturaanyo.asignatura (p_grupotrabajo : OID -> GrupoTrabajo, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public unrelationer_alumnos::Unrelationer->grupotrabajo_alumno.alumnos (p_grupotrabajo : OID -> GrupoTrabajo, p_alumno : List<OID -> Alumno>) : Void;
			public unrelationer_asignatura::Unrelationer->grupotrabajo_asignaturaanyo.asignatura (p_grupotrabajo : OID -> GrupoTrabajo, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
		}
	};
	
	Class Material
	{
		description
		{
			"Clase que representa un material de estudio"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre : String;
			private descripcion : String;
			private unique ruta : String;
			private tam : Float;
			private fecha_subida : Date;
			private visible : Boolean;
		}
		
		operations
		{
			public new::New (p_nombre : String, p_descripcion : String, p_ruta : String, p_tam : Float, p_fecha_subida : Date, p_visible : Boolean, p_profesor : OID -> Profesor, p_asignatura : OID -> AsignaturaAnyo) : Object->Material;
			public modify::Modifier (p_oid : OID -> Material, p_nombre : String, p_descripcion : String, p_ruta : String, p_tam : Float, p_fecha_subida : Date, p_visible : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> Material) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Material>;
			public readOID::ReadOID (p_oid : OID -> Material) : Object -> Material;
			public relationer_asignatura::Relationer->material_asignaturaanyo.asignatura (p_material : OID -> Material, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public relationer_profesor::Relationer->material_profesor_uploader.profesor (p_material : OID -> Material, p_profesor : OID -> Profesor) : Void;
			public unrelationer_asignatura::Unrelationer->material_asignaturaanyo.asignatura (p_material : OID -> Material, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public unrelationer_profesor::Unrelationer->material_profesor_uploader.profesor (p_material : OID -> Material, p_profesor : OID -> Profesor) : Void;
		}
	};
	
	Class AnyoAcademico
	{
		description
		{
			"Clase que representa un año académico"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private unique anyo : Integer;
			private fecha_inicio : Date;
			private fecha_fin : Date;
			private finalizado : Boolean;
		}
		
		operations
		{
			public new::New (p_anyo : Integer, p_fecha_inicio : Date, p_fecha_fin : Date, p_finalizado : Boolean) : Object->AnyoAcademico;
			public modify::Modifier (p_oid : OID -> AnyoAcademico, p_anyo : Integer, p_fecha_inicio : Date, p_fecha_fin : Date, p_finalizado : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> AnyoAcademico) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->AnyoAcademico>;
			public readOID::ReadOID (p_oid : OID -> AnyoAcademico) : Object -> AnyoAcademico;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM AnyoAcademicoEN" };
			public readCod::ReadFilter (anyo : Integer) : Object -> AnyoAcademico { filter = "FROM AnyoAcademicoEN anyo where anyo.Anyo=:anyo"};
			
			public relationer_asignaturas::Relationer->anyo_asignaturaanyo.asignaturas (p_anyoacademico : OID -> AnyoAcademico, p_asignaturaanyo : List<OID -> AsignaturaAnyo>) : Void;
			public relationer_evaluaciones::Relationer->anyoacademico_evaluacion.evaluaciones (p_anyoacademico : OID -> AnyoAcademico, p_evaluacion : List<OID -> Evaluacion>) : Void;
			public relationer_expedientes_anyo::Relationer->anyo_expedienteanyo.expedientes_anyo (p_anyoacademico : OID -> AnyoAcademico, p_expedienteanyo : List<OID -> ExpedienteAnyo>) : Void;
			public unrelationer_asignaturas::Unrelationer->anyo_asignaturaanyo.asignaturas (p_anyoacademico : OID -> AnyoAcademico, p_asignaturaanyo : List<OID -> AsignaturaAnyo>) : Void;
			public unrelationer_evaluaciones::Unrelationer->anyoacademico_evaluacion.evaluaciones (p_anyoacademico : OID -> AnyoAcademico, p_evaluacion : List<OID -> Evaluacion>) : Void;
			public unrelationer_expedientes_anyo::Unrelationer->anyo_expedienteanyo.expedientes_anyo (p_anyoacademico : OID -> AnyoAcademico, p_expedienteanyo : List<OID -> ExpedienteAnyo>) : Void;
		}
	};
	
	Class AsignaturaAnyo
	{
		description
		{
			"Clase que representa una asignatura en un año académico concreto"
		}
		
		attributes
		{
			private oid id : Autogenerated;
		}
		
		operations
		{
			public new::New (p_anyo : OID -> AnyoAcademico, p_asignatura : OID -> Asignatura) : Object->AsignaturaAnyo;
			public modify::Modifier (p_oid : OID -> AsignaturaAnyo) : Void;
			public destroy::Destroy (p_oid : OID -> AsignaturaAnyo) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->AsignaturaAnyo>;
			public readOID::ReadOID (p_oid : OID -> AsignaturaAnyo) : Object -> AsignaturaAnyo;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM AsignaturaAnyoEN" };
			public readRelation::ReadFilter (p_asignatura : OID -> Asignatura, p_anyo : OID -> AnyoAcademico ) : Object -> AsignaturaAnyo 
			{ filter = "FROM AsignaturaAnyoEN as_anyo where as_anyo.Asignatura.Id=:p_asignatura AND as_anyo.Anyo.Id=:p_anyo"};
			
			public relationer_grupos_trabajo::Relationer->grupotrabajo_asignaturaanyo.grupos_trabajo (p_asignaturaanyo : OID -> AsignaturaAnyo, p_grupotrabajo : List<OID -> GrupoTrabajo>) : Void;
			public relationer_materiales::Relationer->material_asignaturaanyo.materiales (p_asignaturaanyo : OID -> AsignaturaAnyo, p_material : List<OID -> Material>) : Void;
			public relationer_sistemas_evaluacion::Relationer->asignaturaanyo_sistemaevaluacion.sistemas_evaluacion (p_asignaturaanyo : OID -> AsignaturaAnyo, p_sistemaevaluacion : List<OID -> SistemaEvaluacion>) : Void;
			public relationer_tutorias::Relationer->tutoria_asignaturaanyo.tutorias (p_asignaturaanyo : OID -> AsignaturaAnyo, p_tutoria : List<OID -> Tutoria>) : Void;
			public unrelationer_grupos_trabajo::Unrelationer->grupotrabajo_asignaturaanyo.grupos_trabajo (p_asignaturaanyo : OID -> AsignaturaAnyo, p_grupotrabajo : List<OID -> GrupoTrabajo>) : Void;
			public unrelationer_materiales::Unrelationer->material_asignaturaanyo.materiales (p_asignaturaanyo : OID -> AsignaturaAnyo, p_material : List<OID -> Material>) : Void;
			public unrelationer_sistemas_evaluacion::Unrelationer->asignaturaanyo_sistemaevaluacion.sistemas_evaluacion (p_asignaturaanyo : OID -> AsignaturaAnyo, p_sistemaevaluacion : List<OID -> SistemaEvaluacion>) : Void;
			public unrelationer_tutorias::Unrelationer->tutoria_asignaturaanyo.tutorias (p_asignaturaanyo : OID -> AsignaturaAnyo, p_tutoria : List<OID -> Tutoria>) : Void;
		}
	};
	
	Class Evaluacion
	{
		description
		{
			"Clase que representa un periodo de evaluación"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre : String;
			private fecha_inicio : Date;
			private fecha_fin : Date;
			private abierta : Boolean;
		}
		
		operations
		{
			public new::New (p_nombre : String, p_fecha_inicio : Date, p_fecha_fin : Date, p_abierta : Boolean, p_anyo_academico : OID -> AnyoAcademico) : Object->Evaluacion;
			public modify::Modifier (p_oid : OID -> Evaluacion, p_nombre : String, p_fecha_inicio : Date, p_fecha_fin : Date, p_abierta : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> Evaluacion) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Evaluacion>;
			public readOID::ReadOID (p_oid : OID -> Evaluacion) : Object -> Evaluacion;
			public relationer_anyo_academico::Relationer->anyoacademico_evaluacion.anyo_academico (p_evaluacion : OID -> Evaluacion, p_anyoacademico : OID -> AnyoAcademico) : Void;
			public relationer_expedientes::Relationer->evaluacion_expedienteevaluacion.expedientes (p_evaluacion : OID -> Evaluacion, p_expedienteevaluacion : List<OID -> ExpedienteEvaluacion>) : Void;
			public relationer_sistemas_evaluacion::Relationer->evaluacion_sistemaevaluacion.sistemas_evaluacion (p_evaluacion : OID -> Evaluacion, p_sistemaevaluacion : List<OID -> SistemaEvaluacion>) : Void;
			public unrelationer_anyo_academico::Unrelationer->anyoacademico_evaluacion.anyo_academico (p_evaluacion : OID -> Evaluacion, p_anyoacademico : OID -> AnyoAcademico) : Void;
			public unrelationer_expedientes::Unrelationer->evaluacion_expedienteevaluacion.expedientes (p_evaluacion : OID -> Evaluacion, p_expedienteevaluacion : List<OID -> ExpedienteEvaluacion>) : Void;
			public unrelationer_sistemas_evaluacion::Unrelationer->evaluacion_sistemaevaluacion.sistemas_evaluacion (p_evaluacion : OID -> Evaluacion, p_sistemaevaluacion : List<OID -> SistemaEvaluacion>) : Void;
		}
	};
	
	Class Entrega
	{
		description
		{
			"Clase que representa una entrega propuesta de prácticas"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre : String;
			private descripcion : String;
			private fecha_apertura : Date;
			private fecha_cierre : Date;
			private puntuacion_maxima : Float;
		}
		
		operations
		{
			public new::New (p_nombre : String, p_descripcion : String, p_fecha_apertura : Date, p_fecha_cierre : Date, p_puntuacion_maxima : Float, p_profesor : OID -> Profesor, p_evaluacion : OID -> SistemaEvaluacion) : Object->Entrega;
			public modify::Modifier (p_oid : OID -> Entrega, p_nombre : String, p_descripcion : String, p_fecha_apertura : Date, p_fecha_cierre : Date, p_puntuacion_maxima : Float) : Void;
			public destroy::Destroy (p_oid : OID -> Entrega) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Entrega>;
			public readOID::ReadOID (p_oid : OID -> Entrega) : Object -> Entrega;
			public relationer_entregas_alumno::Relationer->entrega_entregaalumno.entregas_alumno (p_entrega : OID -> Entrega, p_entregaalumno : List<OID -> EntregaAlumno>) : Void;
			public relationer_evaluacion::Relationer->entrega_sistemaevaluacion.evaluacion (p_entrega : OID -> Entrega, p_sistemaevaluacion : OID -> SistemaEvaluacion) : Void;
			public relationer_profesor::Relationer->profesor_entrega.profesor (p_entrega : OID -> Entrega, p_profesor : OID -> Profesor) : Void;
			public unrelationer_entregas_alumno::Unrelationer->entrega_entregaalumno.entregas_alumno (p_entrega : OID -> Entrega, p_entregaalumno : List<OID -> EntregaAlumno>) : Void;public custom (p_oid : OID -> Entrega) : Void;
			public unrelationer_evaluacion::Unrelationer->entrega_sistemaevaluacion.evaluacion (p_entrega : OID -> Entrega, p_sistemaevaluacion : OID -> SistemaEvaluacion) : Void;
			public unrelationer_profesor::Unrelationer->profesor_entrega.profesor (p_entrega : OID -> Entrega, p_profesor : OID -> Profesor) : Void;
		}
	};
	
	Class EntregaAlumno
	{
		description
		{
			"Clase que representa una entrega realizada por un alumno"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre_fichero : String;
			private extension : String;
			private unique ruta : String;
			private tam : Float;
			private fecha_entrega : Date;
			private nota : Float;
			private corregido : Boolean;
			private comentario_alumno : String;
			private comentario_profesor : String;
		}
		
		operations
		{
			public new::New (p_nombre_fichero : String, p_extension : String, p_ruta : String, p_tam : Float, p_fecha_entrega : Date, p_nota : Float, p_corregido : Boolean, p_comentario_alumno : String, p_comentario_profesor : String, p_entrega : OID -> Entrega, p_alumno : OID -> Alumno) : Object->EntregaAlumno;
			public modify::Modifier (p_oid : OID -> EntregaAlumno, p_nombre_fichero : String, p_extension : String, p_ruta : String, p_tam : Float, p_fecha_entrega : Date, p_nota : Float, p_corregido : Boolean, p_comentario_alumno : String, p_comentario_profesor : String) : Void;
			public destroy::Destroy (p_oid : OID -> EntregaAlumno) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->EntregaAlumno>;
			public readOID::ReadOID (p_oid : OID -> EntregaAlumno) : Object -> EntregaAlumno;
			public relationer_alumno::Relationer->alumno_entregaalumno.alumno (p_entregaalumno : OID -> EntregaAlumno, p_alumno : OID -> Alumno) : Void;
			public relationer_entrega::Relationer->entrega_entregaalumno.entrega (p_entregaalumno : OID -> EntregaAlumno, p_entrega : OID -> Entrega) : Void;
			public unrelationer_alumno::Unrelationer->alumno_entregaalumno.alumno (p_entregaalumno : OID -> EntregaAlumno, p_alumno : OID -> Alumno) : Void;
			public unrelationer_entrega::Unrelationer->entrega_entregaalumno.entrega (p_entregaalumno : OID -> EntregaAlumno, p_entrega : OID -> Entrega) : Void;
		}
	};
	
	Class SistemaEvaluacion
	{
		description
		{
			"Clase que representa el sistema de evaluación de unas asignatura"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private puntuacion_maxima : Float;
		}
		
		operations
		{
			public new::New (p_puntuacion_maxima : Float, p_asignatura : OID -> AsignaturaAnyo, p_evaluacion : OID -> Evaluacion) : Object->SistemaEvaluacion;
			public modify::Modifier (p_oid : OID -> SistemaEvaluacion, p_puntuacion_maxima : Float) : Void;
			public destroy::Destroy (p_oid : OID -> SistemaEvaluacion) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->SistemaEvaluacion>;
			public readOID::ReadOID (p_oid : OID -> SistemaEvaluacion) : Object -> SistemaEvaluacion;
			public relationer_asignatura::Relationer->asignaturaanyo_sistemaevaluacion.asignatura (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public relationer_controles::Relationer->sistemaevaluacion_control.controles (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_control : List<OID -> Control>) : Void;
			public relationer_entregas::Relationer->entrega_sistemaevaluacion.entregas (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_entrega : List<OID -> Entrega>) : Void;
			public relationer_evaluacion::Relationer->evaluacion_sistemaevaluacion.evaluacion (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_evaluacion : OID -> Evaluacion) : Void;
			public relationer_evaluaciones_alumno::Relationer->sistemaevaluacion_evaluacionalumno.evaluaciones_alumno (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_evaluacionalumno : List<OID -> EvaluacionAlumno>) : Void;
			public unrelationer_asignatura::Unrelationer->asignaturaanyo_sistemaevaluacion.asignatura (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_asignaturaanyo : OID -> AsignaturaAnyo) : Void;
			public unrelationer_controles::Unrelationer->sistemaevaluacion_control.controles (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_control : List<OID -> Control>) : Void;
			public unrelationer_entregas::Unrelationer->entrega_sistemaevaluacion.entregas (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_entrega : List<OID -> Entrega>) : Void;
			public unrelationer_evaluacion::Unrelationer->evaluacion_sistemaevaluacion.evaluacion (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_evaluacion : OID -> Evaluacion) : Void;
			public unrelationer_evaluaciones_alumno::Unrelationer->sistemaevaluacion_evaluacionalumno.evaluaciones_alumno (p_sistemaevaluacion : OID -> SistemaEvaluacion, p_evaluacionalumno : List<OID -> EvaluacionAlumno>) : Void;
		}
	};
	
	Class EvaluacionAlumno
	{
		description
		{
			"Clase que representa el desarrollo de un sistema de evaluación de un alumno en concreto"
		}
		
		attributes
		{
			private oid id : Autogenerated;
		}
		
		operations
		{
			public new::New (p_sistema_evaluacion : OID -> SistemaEvaluacion, p_alumno : OID -> Alumno) : Object->EvaluacionAlumno;
			public modify::Modifier (p_oid : OID -> EvaluacionAlumno) : Void;
			public destroy::Destroy (p_oid : OID -> EvaluacionAlumno) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->EvaluacionAlumno>;
			public readOID::ReadOID (p_oid : OID -> EvaluacionAlumno) : Object -> EvaluacionAlumno;
			public relationer_alumno::Relationer->alumno_evaluacionalumno.alumno (p_evaluacionalumno : OID -> EvaluacionAlumno, p_alumno : OID -> Alumno) : Void;
			public relationer_sistema_evaluacion::Relationer->sistemaevaluacion_evaluacionalumno.sistema_evaluacion (p_evaluacionalumno : OID -> EvaluacionAlumno, p_sistemaevaluacion : OID -> SistemaEvaluacion) : Void;
			public unrelationer_alumno::Unrelationer->alumno_evaluacionalumno.alumno (p_evaluacionalumno : OID -> EvaluacionAlumno, p_alumno : OID -> Alumno) : Void;
			public unrelationer_sistema_evaluacion::Unrelationer->sistemaevaluacion_evaluacionalumno.sistema_evaluacion (p_evaluacionalumno : OID -> EvaluacionAlumno, p_sistemaevaluacion : OID -> SistemaEvaluacion) : Void;
		}
	};
	
	Class Control
	{
		description
		{
			"Clase que representa un examen propuesto para una asignatura"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre : String;
			private descripcion : String;
			private fecha_apertura : Date;
			private fecha_cierre : Date;
			private duracion_minutos : Integer;
			private puntuacion_maxima : Float;
			private penalizacion_fallo : Float;
		}
		
		operations
		{
			public new::New (p_nombre : String, p_descripcion : String, p_fecha_apertura : Date, p_fecha_cierre : Date, p_duracion_minutos : Integer, p_puntuacion_maxima : Float, p_penalizacion_fallo : Float, p_sistema_evaluacion : OID -> SistemaEvaluacion) : Object->Control;
			public modify::Modifier (p_oid : OID -> Control, p_nombre : String, p_descripcion : String, p_fecha_apertura : Date, p_fecha_cierre : Date, p_duracion_minutos : Integer, p_puntuacion_maxima : Float, p_penalizacion_fallo : Float) : Void;
			public destroy::Destroy (p_oid : OID -> Control) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Control>;
			public readOID::ReadOID (p_oid : OID -> Control) : Object -> Control;
			public relationer_bolsas_preguntas::Relationer->control_bolsapreguntas.bolsas_preguntas (p_control : OID -> Control, p_bolsapreguntas : List<OID -> BolsaPreguntas>) : Void;
			public relationer_controles_alumno::Relationer->control_controlalumno.controles_alumno (p_control : OID -> Control, p_controlalumno : List<OID -> ControlAlumno>) : Void;
			public relationer_sistema_evaluacion::Relationer->sistemaevaluacion_control.sistema_evaluacion (p_control : OID -> Control, p_sistemaevaluacion : OID -> SistemaEvaluacion) : Void;
			public unrelationer_bolsas_preguntas::Unrelationer->control_bolsapreguntas.bolsas_preguntas (p_control : OID -> Control, p_bolsapreguntas : List<OID -> BolsaPreguntas>) : Void;
			public unrelationer_controles_alumno::Unrelationer->control_controlalumno.controles_alumno (p_control : OID -> Control, p_controlalumno : List<OID -> ControlAlumno>) : Void;
			public unrelationer_sistema_evaluacion::Unrelationer->sistemaevaluacion_control.sistema_evaluacion (p_control : OID -> Control, p_sistemaevaluacion : OID -> SistemaEvaluacion) : Void;
		}
	};
	
	Class ControlAlumno
	{
		description
		{
			"Clase que representa una control realizado por un alumno"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nota : Float;
			private terminado : Boolean;
			private corregido : Boolean;
		}
		
		operations
		{
			public new::New (p_nota : Float, p_terminado : Boolean, p_corregido : Boolean, p_alumno : OID -> Alumno, p_control : OID -> Control) : Object->ControlAlumno;
			public modify::Modifier (p_oid : OID -> ControlAlumno, p_nota : Float, p_terminado : Boolean, p_corregido : Boolean) : Void;
			public destroy::Destroy (p_oid : OID -> ControlAlumno) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->ControlAlumno>;
			public readOID::ReadOID (p_oid : OID -> ControlAlumno) : Object -> ControlAlumno;
			public relationer_alumno::Relationer->alumno_controlalumno.alumno (p_controlalumno : OID -> ControlAlumno, p_alumno : OID -> Alumno) : Void;
			public relationer_control::Relationer->control_controlalumno.control (p_controlalumno : OID -> ControlAlumno, p_control : OID -> Control) : Void;
			public relationer_preguntas::Relationer->controlalumno_preguntacontrol.preguntas (p_controlalumno : OID -> ControlAlumno, p_preguntacontrol : List<OID -> PreguntaControl>) : Void;
			public unrelationer_alumno::Unrelationer->alumno_controlalumno.alumno (p_controlalumno : OID -> ControlAlumno, p_alumno : OID -> Alumno) : Void;
			public unrelationer_control::Unrelationer->control_controlalumno.control (p_controlalumno : OID -> ControlAlumno, p_control : OID -> Control) : Void;
			public unrelationer_preguntas::Unrelationer->controlalumno_preguntacontrol.preguntas (p_controlalumno : OID -> ControlAlumno, p_preguntacontrol : List<OID -> PreguntaControl>) : Void;
		}
	};
	
	Class BolsaPreguntas
	{
		description
		{
			"Clase que representa una bolsa de preguntas sobre una asignatura"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private nombre : String;
			private descripcion : String;
			private fecha_creacion : Time;
			private fecha_modificacion : Time;
		}
		
		operations
		{
			public new::New (p_nombre : String, p_descripcion : String, p_fecha_creacion : Time, p_fecha_modificacion : Time, p_asignatura : OID -> Asignatura) : Object->BolsaPreguntas;
			public modify::Modifier (p_oid : OID -> BolsaPreguntas, p_nombre : String, p_descripcion : String, p_fecha_creacion : Time, p_fecha_modificacion : Time) : Void;
			public destroy::Destroy (p_oid : OID -> BolsaPreguntas) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->BolsaPreguntas>;
			public readOID::ReadOID (p_oid : OID -> BolsaPreguntas) : Object -> BolsaPreguntas;
			public readCantidad::ReadFilter () : Long { filter = "select count(*) FROM BolsaPreguntasEN" };
			
			public relationer_asignatura::Relationer->asignatura_bolsapreguntas.asignatura (p_bolsapreguntas : OID -> BolsaPreguntas, p_asignatura : OID -> Asignatura) : Void;
			public relationer_controles::Relationer->control_bolsapreguntas.controles (p_bolsapreguntas : OID -> BolsaPreguntas, p_control : List<OID -> Control>) : Void;
			public relationer_preguntas::Relationer->bolsapreguntas_preguntas.preguntas (p_bolsapreguntas : OID -> BolsaPreguntas, p_pregunta : List<OID -> Pregunta>) : Void;
			public unrelationer_asignatura::Unrelationer->asignatura_bolsapreguntas.asignatura (p_bolsapreguntas : OID -> BolsaPreguntas, p_asignatura : OID -> Asignatura) : Void;
			public unrelationer_controles::Unrelationer->control_bolsapreguntas.controles (p_bolsapreguntas : OID -> BolsaPreguntas, p_control : List<OID -> Control>) : Void;
			public unrelationer_preguntas::Unrelationer->bolsapreguntas_preguntas.preguntas (p_bolsapreguntas : OID -> BolsaPreguntas, p_pregunta : List<OID -> Pregunta>) : Void;
		}
	};
	
	Class Pregunta
	{
		description
		{
			"Clase que representa una pregunta que puede ser utilizada en controles"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private contenido : String;
			private explicacion : String;
		}
		
		operations
		{
			public new::New (p_contenido : String, p_explicacion : String, p_bolsa : OID -> BolsaPreguntas) : Object->Pregunta;
			public modify::Modifier (p_oid : OID -> Pregunta, p_contenido : String, p_explicacion : String) : Void;
			public destroy::Destroy (p_oid : OID -> Pregunta) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Pregunta>;
			public readOID::ReadOID (p_oid : OID -> Pregunta) : Object -> Pregunta;
			public relationer_bolsa::Relationer->bolsapreguntas_preguntas.bolsa (p_pregunta : OID -> Pregunta, p_bolsapreguntas : OID -> BolsaPreguntas) : Void;
			public relationer_respuesta_correcta::Relationer->pregunta_respuestacorrecta.respuesta_correcta (p_pregunta : OID -> Pregunta, p_respuesta : OID -> Respuesta) : Void;
			public relationer_respuestas::Relationer->pregunta_respuesta.respuestas (p_pregunta : OID -> Pregunta, p_respuesta : List<OID -> Respuesta>) : Void;
			public unrelationer_bolsa::Unrelationer->bolsapreguntas_preguntas.bolsa (p_pregunta : OID -> Pregunta, p_bolsapreguntas : OID -> BolsaPreguntas) : Void;
			public unrelationer_respuesta_correcta::Unrelationer->pregunta_respuestacorrecta.respuesta_correcta (p_pregunta : OID -> Pregunta, p_respuesta : OID -> Respuesta) : Void;
			public unrelationer_respuestas::Unrelationer->pregunta_respuesta.respuestas (p_pregunta : OID -> Pregunta, p_respuesta : List<OID -> Respuesta>) : Void;
		}
	};
	
	Class PreguntaControl
	{
		description
		{
			"Clase que representa una pregunta realizada dentro del control de un alumno"
		}
		
		attributes
		{
			private oid id : Autogenerated;
		}
		
		operations
		{
			public new::New (p_control : OID -> ControlAlumno, p_pregunta : OID -> Pregunta) : Object->PreguntaControl;
			public modify::Modifier (p_oid : OID -> PreguntaControl) : Void;
			public destroy::Destroy (p_oid : OID -> PreguntaControl) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->PreguntaControl>;
			public readOID::ReadOID (p_oid : OID -> PreguntaControl) : Object -> PreguntaControl;
			public relationer_control::Relationer->controlalumno_preguntacontrol.control (p_preguntacontrol : OID -> PreguntaControl, p_controlalumno : OID -> ControlAlumno) : Void;
			public relationer_pregunta::Relationer->pregunta_preguntacontrol.pregunta (p_preguntacontrol : OID -> PreguntaControl, p_pregunta : OID -> Pregunta) : Void;
			public relationer_respuesta_elegida::Relationer->preguntacontrol_respuesta.respuesta_elegida (p_preguntacontrol : OID -> PreguntaControl, p_respuesta : OID -> Respuesta) : Void;
			public unrelationer_control::Unrelationer->controlalumno_preguntacontrol.control (p_preguntacontrol : OID -> PreguntaControl, p_controlalumno : OID -> ControlAlumno) : Void;
			public unrelationer_pregunta::Unrelationer->pregunta_preguntacontrol.pregunta (p_preguntacontrol : OID -> PreguntaControl, p_pregunta : OID -> Pregunta) : Void;
			public unrelationer_respuesta_elegida::Unrelationer->preguntacontrol_respuesta.respuesta_elegida (p_preguntacontrol : OID -> PreguntaControl, p_respuesta : OID -> Respuesta) : Void;
		}
	};
	
	Class Respuesta
	{
		description
		{
			"Clase que representa una respuesta a una pregunta de un control"
		}
		
		attributes
		{
			private oid id : Autogenerated;
			private contenido : String;
		}
		
		operations
		{
			public new::New (p_contenido : String, p_pregunta : OID -> Pregunta) : Object->Respuesta;
			public modify::Modifier (p_oid : OID -> Respuesta, p_contenido : String) : Void;
			public destroy::Destroy (p_oid : OID -> Respuesta) : Void;
			public readAll::ReadAll (/* No arguments */) : List<Object->Respuesta>;
			public readOID::ReadOID (p_oid : OID -> Respuesta) : Object -> Respuesta;
			public relationer_pregunta::Relationer->pregunta_respuesta.pregunta (p_respuesta : OID -> Respuesta, p_pregunta : OID -> Pregunta) : Void;
			public unrelationer_pregunta::Unrelationer->pregunta_respuesta.pregunta (p_respuesta : OID -> Respuesta, p_pregunta : OID -> Pregunta) : Void;
		}
	};
	
	Association tutoria_mensaje (Tutoria - Mensaje)
	{
		description
		{
			"Relación entre una tutoría y sus mensajes"
		}
		
		=> navigable mensajes:Composite ("0", "*");
		<= navigable tutoria ("1","1");
	};
	
	Association mensaje_usuariocomun (Mensaje - UsuarioComun)
	{
		description
		{
			"Relación entre un mensaje y el usuario que lo escribe"
		}
		
		=> navigable usuario ("1","1");
		<= navigable mensajes ("0","*");
	};
	
	Association tutoria_profesor (Tutoria - Profesor)
	{
		description
		{
			"Relación entre una tutoría y el profesor que la recibe"
		}
		
		=> navigable profesor ("1","1");
		<= navigable tutorias ("0","*");
	};
	
	Association tutoria_alumno (Tutoria - Alumno)
	{
		description
		{
			"Relación entre una tutoría y el alumno que la escribe"
		}
		
		=> navigable alumno ("1","1");
		<= navigable tutorias ("0","*");
	};
	
	Association tutoria_asignaturaanyo (Tutoria - AsignaturaAnyo)
	{
		description
		{
			"Relación entre una tutoría y la asignatura sobre la que trata"
		}
		
		=> navigable asignatura ("1","1");
		<= navigable tutorias ("0","*");
	};
	
	Association material_profesor_uploader (Material - Profesor)
	{
		description
		{
			"Relación entre un material de estudio y el profesor que lo ha subido"
		}
		
		=> navigable profesor ("1","1");
		<= navigable materiales ("0","*");
	};
	
	Association material_asignaturaanyo (Material - AsignaturaAnyo)
	{
		description
		{
			"Relación entre un material de estudio y la asignatura que pertenece"
		}
		
		=> navigable asignatura ("1","1");
		<= navigable materiales:Composite ("0","*");
	};
	
	Association grupotrabajo_alumno (GrupoTrabajo - Alumno)
	{
		description
		{
			"Relación entre una un grupo de trabajo y los alumnos que pertenecen a él"
		}
		
		=> navigable alumnos ("0","*");
		<= navigable grupos_trabajo ("0","*");
	};
	
	Association grupotrabajo_asignaturaanyo (GrupoTrabajo - AsignaturaAnyo)
	{
		description
		{
			"Relación entre un grupo de trabajo y la asignatura a la que pertenece"
		}
		
		=> navigable asignatura ("1","1");
		<= navigable grupos_trabajo:Composite ("0","*");
	};
	
	Association anyoacademico_evaluacion (AnyoAcademico - Evaluacion)
	{
		description
		{
			"Relación entre un año académico y una evaluación académica"
		}
		
		=> navigable evaluaciones:Composite ("0","*");
		<= navigable anyo_academico ("1","1");
	};
	
	Association profesor_entrega (Profesor - Entrega)
	{
		description
		{
			"Relación entre un profesor y las entregas que ha propuesto"
		}
		
		=> navigable entregas_propuestas ("0","*");
		<= navigable profesor ("1","1");
	};
	
	Association entrega_sistemaevaluacion (Entrega - SistemaEvaluacion)
	{
		description
		{
			"Relación entre una entrega propuesta y un sistema de evaluación de una asignatura"
		}
		
		=> navigable evaluacion ("1","1");
		<= navigable entregas ("0","*");
	};
	
	Association asignatura_curso (Asignatura - Curso)
	{
		description
		{
			"Relación entre una asignatura y el curso en el que se imparte"
		}
		
		=> navigable curso:Composite ("0","1");
		<= navigable asignaturas ("0","*");
	};
	
	Association alumno_expediente (Alumno - Expediente)
	{
		description
		{
			"Relación entre un alumno y su expediente académico"
		}
		
		=> navigable expediente:Composite ("1","1");
		<= navigable alumno ("1","1");
	};
	
	Association expendiente_expedienteanyo (Expediente - ExpedienteAnyo)
	{
		description
		{
			"Relación entre expediente y el expediente de un año académico"
		}
		
		=> navigable expedientes_anyo ("0","*");
		<= navigable expediente ("1","1");	
	};
	
	Association anyo_expedienteanyo (AnyoAcademico - ExpedienteAnyo)
	{
		description
		{
			"Relación entre un año y el expediente académico para un año"
		}
		
		=> navigable expedientes_anyo ("0","*");
		<= navigable anyo ("1","1");	
	};
	
	Association entrega_entregaalumno (Entrega - EntregaAlumno)
	{
		description
		{
			"Relación entre una entrega y la entrega realizada por un alumno"
		}
		
		=> navigable entregas_alumno ("0","*");
		<= navigable entrega ("1","1");
	};
	
	Association alumno_entregaalumno (Alumno - EntregaAlumno)
	{
		description
		{
			"Relación entre un alumno y una entrega realizada por él"
		}
		
		=> navigable entregas ("0", "*");
		<= navigable alumno ("1","1");
	};
	
	Association anyo_asignaturaanyo (AnyoAcademico - AsignaturaAnyo)
	{
		description
		{
			"Relación entre un año académico y una asignatura perteneciente a ese año"
		}
		
		=> navigable asignaturas ("0","*");
		<= navigable anyo ("1","1");
	};
	
	Association asignatura_asignaturaanyo (Asignatura - AsignaturaAnyo)
	{
		description
		{
			"Relación entre una asignatura y la asignatura impartida en un año en concreto"
		}
		
		=> navigable asignaturas_anyo ("0","*");
		<= navigable asignatura ("1","1");
	};
	
	Association asignaturaanyo_sistemaevaluacion (AsignaturaAnyo - SistemaEvaluacion)
	{
		description
		{
			"Relación entre una asignatura y su sistema de evaluación"
		}
		
		=> navigable sistemas_evaluacion ("0","*");
		<= navigable asignatura ("1","1");
	};
	
	Association evaluacion_sistemaevaluacion (Evaluacion - SistemaEvaluacion)
	{
		description
		{
			"Relación entre una evaluación y el sistema de evaluación de una asignatura"
		}
		
		=> navigable sistemas_evaluacion ("0","*");
		<= navigable evaluacion ("1","1");
	};
	
	Association sistemaevaluacion_evaluacionalumno (SistemaEvaluacion - EvaluacionAlumno)
	{
		description
		{
			"Relación entre un sistema de evaluación y el sistema de evaluación específico de un alumno"
		}
		
		=> navigable evaluaciones_alumno ("0","*");
		<= navigable sistema_evaluacion ("1","1");
		
	};
	
	Association alumno_evaluacionalumno (Alumno - EvaluacionAlumno)
	{
		description
		{
			"Relación entre un alumno y un sistema de evaluación"
		}
		
		=> navigable sistemas_evaluacion ("0","*");
		<= navigable alumno ("1","1");
	};
	
	Association expedienteanyo_expedienteasignatura (ExpedienteAnyo - ExpedienteAsignatura)
	{
		description
		{
			"Relación entre el expediente de un año y el de una asignatura para un alumno"
		}
		
		=> navigable expedientes_asignatura ("0","*");
		<= navigable expediente_anyo ("1","1");
	};
	
	Association asignatura_expedienteasignatura (Asignatura - ExpedienteAsignatura)
	{
		description
		{
			"Relación entre una asignatura y el expediente de una asignatura para un alumno"
		}
		
		=> navigable expedientes_asignatura ("0","*");
		<= navigable asignatura ("1","1");
	};
	
	Association expedienteasignatura_nota (ExpedienteAsignatura - Nota)
	{
		description
		{
			"Relación entre el expediente de una asignatura y la nota recibida"
		}
		
		=> navigable nota ("0","1");
		<= expedientes ("0","*");
	};
	
	Association expedienteasignatura_expedienteevaluacion (ExpedienteAsignatura - ExpedienteEvaluacion)
	{
		description
		{
			"Relación entre el expediente de una asignatura y el expediente relativo a una evaluación"
		}
		
		=> navigable expedientes_evaluacion ("0","*");
		<= navigable expediente_asignatura ("1","1");
	};
	
	Association evaluacion_expedienteevaluacion (Evaluacion - ExpedienteEvaluacion)
	{
		description
		{
			"Relación entre una evaluación y un expediente relativo a esa evaluación"
		}
		
		=> navigable expedientes ("0","*");
		<= navigable evaluacion ("1","1");
	};
	
	Association alumno_controlalumno (Alumno - ControlAlumno)
	{
		description
		{
			"Relación entre un alumno y un control realizado por él"
		}
		
		=> navigable controles ("0","*");
		<= navigable alumno ("1","1");
	};
	
	Association control_controlalumno (Control - ControlAlumno)
	{
		description
		{
			"Relación entre un control y el control realizado por un alumno"
		}
		
		=> navigable controles_alumno ("0","*");
		<= navigable control ("1","1");
	};
	
	Association controlalumno_preguntacontrol (ControlAlumno - PreguntaControl)
	{
		description
		{
			"Relación entre el control de un alumno y una pregunta realizada y respondida en él"
		}
		
		=> navigable preguntas("0","*");
		<= navigable control ("1","1");
	};
	
	Association pregunta_preguntacontrol (Pregunta - PreguntaControl)
	{
		description
		{
			"Relación entre una pregunta y una pregunta realizada en un control"
		}
		
		=> preguntas_control("0","*");
		<= navigable pregunta ("1","1");
	};
	
	Association preguntacontrol_respuesta (PreguntaControl - Respuesta)
	{
		description
		{
			"Relación entre una pregunta realizada en un control y la respuesta seleccionada"
		}
		
		=> navigable respuesta_elegida ("0","1");
		<= preguntas_control ("0","*");
	};
	
	Association pregunta_respuesta (Pregunta - Respuesta)
	{
		description
		{
			"Relación entre una pregunta y sus posibles respuestas"
		}
		
		=> navigable respuestas:Composite ("0","*");
		<= navigable pregunta ("1","1");
	};
	
	Association pregunta_respuestacorrecta (Pregunta - Respuesta)
	{
		description
		{
			"Relación entre una pregunta y su respuesta correcta"
		}
		
		=> navigable respuesta_correcta ("0","1");
		<= pregunta_relacionada ("0","1");
	};
	
	Association control_bolsapreguntas (Control - BolsaPreguntas)
	{
		description
		{
			"Relación entre un control y las bolsas de preguntas de las que saca las preguntas"
		}
		
		=> navigable bolsas_preguntas("0","*");
		<= navigable controles ("0","*");
	};
	
	Association bolsapreguntas_preguntas (BolsaPreguntas - Pregunta)
	{
		description
		{
			"Relación entre una bolsa de preguntas y las preguntas que contiene"
		}
		
		=> navigable preguntas:Composite ("0","*");
		<= navigable bolsa ("1","1");
	};
	
	Association asignatura_bolsapreguntas (Asignatura - BolsaPreguntas)
	{
		description
		{
			"Relación entre una asignatura y una bolsa de preguntas"
		}
		
		=> navigable bolsas_preguntas:Composite ("0","*");
		<= navigable asignatura ("1","1");
	};
	
	Association sistemaevaluacion_control (SistemaEvaluacion - Control)
	{
		description
		{
			"Relación entre un sistema de evaluación y los controles programados"
		}
		
		=> navigable controles:Composite ("0","*");
		<= navigable sistema_evaluacion ("1","1");
	};
	
}

